/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGPRESENTATION_GROUP
#define OSGPRESENTATION_GROUP 1

#include <osg/MatrixTransform>
#include <osgPresentation/Export>

namespace osgPresentation {

/** osgPresentation::Group
*/
class OSGPRESENTATION_EXPORT Group : public osg::MatrixTransform
{
    public :

        Group() {}

        /** Copy constructor using CopyOp to manage deep vs shallow copy. */
        Group(const Group& group,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) : osg::MatrixTransform(group,copyop) {}

        META_Node(osgPresentation, Group);

        /** Convinience method that casts the named UserObject to osg::TemplateValueObject<T> and gets the value.
            * To use this template method you need to include the osg/ValueObject header.*/
        template<typename T>
        bool getProperty(const std::string& name, T& value) const
        {
            return getUserValue(name, value);
        }

        /** Convinience method that creates the osg::TemplateValueObject<T> to store the
            * specified value and adds it as a named UserObject.
            * To use this template method you need to include the osg/ValueObject header. */
        template<typename T>
        void setProperty(const std::string& name, const T& value)
        {
            return setUserValue(name, value);
        }

    protected :

        virtual ~Group() {}
};

}

#endif
