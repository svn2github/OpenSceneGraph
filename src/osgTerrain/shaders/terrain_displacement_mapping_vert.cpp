char terrain_displacement_mapping_vert[] = "uniform sampler2D terrainTexture;\n"
                                           "varying vec2 texcoord;\n"
                                           "varying vec4 basecolor;\n"
                                           "\n"
                                           "void main(void)\n"
                                           "{\n"
                                           "    texcoord = gl_MultiTexCoord0.xy;\n"
                                           "    vec2 texelWorldRatio = gl_MultiTexCoord0.zw;\n"
                                           "    vec2 texelTexcoordSize = gl_Color.xy;\n"
                                           "\n"
                                           "    vec2 texcoord_right = texcoord;\n"
                                           "    if (texcoord.x<0.5) texcoord_right.x = texcoord_right.x+texelTexcoordSize.x;\n"
                                           "    else texcoord_right.x = texcoord_right.x-texelTexcoordSize.x;\n"
                                           "\n"
                                           "    vec2 texcoord_up = texcoord;\n"
                                           "    if (texcoord.y<0.5) texcoord_up.y = texcoord_up.y+texelTexcoordSize.y;\n"
                                           "    else texcoord_up.y = texcoord_up.y-texelTexcoordSize.y;\n"
                                           "\n"
                                           "\n"
                                           "    float height_center = texture2D(terrainTexture, texcoord).r;\n"
                                           "    float height_right = texture2D(terrainTexture, texcoord_right).r;\n"
                                           "    float height_up = texture2D(terrainTexture, texcoord_up).r;\n"
                                           "\n"
                                           "    vec2 gradient = vec2((height_center-height_right)*texelWorldRatio.x, (height_center-height_up)*texelWorldRatio.y);\n"
                                           "    vec3 normal = normalize(vec3(gradient.x, gradient.y, 1.0));\n"
                                           "    float intensity = normal.z;\n"
                                           "    basecolor = vec4(intensity, intensity, intensity, 1.0);\n"
                                           "\n"
                                           "    vec3 position = gl_Vertex.xyz + gl_Normal.xyz * height_center ;\n"
                                           "    gl_Position   = gl_ModelViewProjectionMatrix * vec4(position,1.0);\n"
                                           "\n"
                                           "};\n"
                                           "\n";
