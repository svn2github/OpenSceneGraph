// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/Vec4>
#include <osgFX/Outline>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgFX::Outline)
	I_DeclaringFile("osgFX/Outline");
	I_BaseType(osgFX::Effect);
	I_Constructor0(____Outline,
	               "Constructor. ",
	               "");
	I_ConstructorWithDefaults2(IN, const osgFX::Outline &, copy, , IN, const osg::CopyOp &, op, osg::CopyOp::SHALLOW_COPY,
	                           ____Outline__C5_Outline_R1__C5_osg_CopyOp_R1,
	                           "Copy constructor. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "clone an object of the same type as the node. ",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "return a clone of a node, with Object* return type. ",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "return true if this and obj are of the same kind of object. ",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the node's class type. ",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the node's library. ",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "Visitor Pattern : calls the apply method of a NodeVisitor with this node's type. ",
	          "");
	I_Method0(const char *, effectName,
	          Properties::VIRTUAL,
	          __C5_char_P1__effectName,
	          "get the name of this Effect ",
	          "");
	I_Method0(const char *, effectDescription,
	          Properties::VIRTUAL,
	          __C5_char_P1__effectDescription,
	          "get a brief description of this Effect ",
	          "");
	I_Method0(const char *, effectAuthor,
	          Properties::VIRTUAL,
	          __C5_char_P1__effectAuthor,
	          "get the effect author's name ",
	          "");
	I_Method1(void, setWidth, IN, float, w,
	          Properties::NON_VIRTUAL,
	          __void__setWidth__float,
	          "Set outline width. ",
	          "");
	I_Method0(float, getWidth,
	          Properties::NON_VIRTUAL,
	          __float__getWidth,
	          "Get outline width. ",
	          "");
	I_Method1(void, setColor, IN, const osg::Vec4 &, color,
	          Properties::NON_VIRTUAL,
	          __void__setColor__C5_osg_Vec4_R1,
	          "Set outline color. ",
	          "");
	I_Method0(const osg::Vec4 &, getColor,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec4_R1__getColor,
	          "Get outline color. ",
	          "");
	I_ProtectedMethod0(bool, define_techniques,
	                   Properties::VIRTUAL,
	                   Properties::NON_CONST,
	                   __bool__define_techniques,
	                   "Define available techniques. ",
	                   "");
	I_SimpleProperty(const osg::Vec4 &, Color, 
	                 __C5_osg_Vec4_R1__getColor, 
	                 __void__setColor__C5_osg_Vec4_R1);
	I_SimpleProperty(float, Width, 
	                 __float__getWidth, 
	                 __void__setWidth__float);
END_REFLECTOR

