// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/ApplicationUsage>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventAdapter>
#include <osgGA/GUIEventHandler>
#include <osgPresentation/PickEventHandler>
#include <osgPresentation/SlideEventHandler>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgPresentation::PickEventHandler)
	I_DeclaringFile("osgPresentation/PickEventHandler");
	I_BaseType(osgGA::GUIEventHandler);
	I_ConstructorWithDefaults4(IN, osgPresentation::Operation, operation, , IN, bool, relativeJump, true, IN, int, slideNum, 0, IN, int, layerNum, 0,
	                           ____PickEventHandler__osgPresentation_Operation__bool__int__int,
	                           "",
	                           "");
	I_ConstructorWithDefaults5(IN, const std::string &, str, , IN, osgPresentation::Operation, operation, , IN, bool, relativeJump, true, IN, int, slideNum, 0, IN, int, layerNum, 0,
	                           ____PickEventHandler__C5_std_string_R1__osgPresentation_Operation__bool__int__int,
	                           "",
	                           "");
	I_ConstructorWithDefaults4(IN, const osgPresentation::KeyPosition &, keyPos, , IN, bool, relativeJump, true, IN, int, slideNum, 0, IN, int, layerNum, 0,
	                           ____PickEventHandler__C5_osgPresentation_KeyPosition_R1__bool__int__int,
	                           "",
	                           "");
	I_Method1(void, setOperation, IN, osgPresentation::Operation, operation,
	          Properties::NON_VIRTUAL,
	          __void__setOperation__osgPresentation_Operation,
	          "",
	          "");
	I_Method0(osgPresentation::Operation, getOperation,
	          Properties::NON_VIRTUAL,
	          __osgPresentation_Operation__getOperation,
	          "",
	          "");
	I_Method1(void, setCommand, IN, const std::string &, str,
	          Properties::NON_VIRTUAL,
	          __void__setCommand__C5_std_string_R1,
	          "",
	          "");
	I_Method0(const std::string &, getCommand,
	          Properties::NON_VIRTUAL,
	          __C5_std_string_R1__getCommand,
	          "",
	          "");
	I_Method1(void, setKeyPosition, IN, const osgPresentation::KeyPosition &, keyPos,
	          Properties::NON_VIRTUAL,
	          __void__setKeyPosition__C5_osgPresentation_KeyPosition_R1,
	          "",
	          "");
	I_Method0(const osgPresentation::KeyPosition &, getKeyPosition,
	          Properties::NON_VIRTUAL,
	          __C5_osgPresentation_KeyPosition_R1__getKeyPosition,
	          "",
	          "");
	I_Method2(void, setRelativeJump, IN, int, slideDelta, IN, int, layerDelta,
	          Properties::NON_VIRTUAL,
	          __void__setRelativeJump__int__int,
	          "",
	          "");
	I_Method2(void, setAbsoluteJump, IN, int, slideNum, IN, int, layerNum,
	          Properties::NON_VIRTUAL,
	          __void__setAbsoluteJump__int__int,
	          "",
	          "");
	I_Method0(bool, getRelativeJump,
	          Properties::NON_VIRTUAL,
	          __bool__getRelativeJump,
	          "",
	          "");
	I_Method0(int, getSlideNum,
	          Properties::NON_VIRTUAL,
	          __int__getSlideNum,
	          "",
	          "");
	I_Method0(int, getLayerNum,
	          Properties::NON_VIRTUAL,
	          __int__getLayerNum,
	          "",
	          "");
	I_Method0(bool, requiresJump,
	          Properties::NON_VIRTUAL,
	          __bool__requiresJump,
	          "",
	          "");
	I_Method4(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, aa, IN, osg::Object *, x, IN, osg::NodeVisitor *, x,
	          Properties::VIRTUAL,
	          __bool__handle__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1__osg_Object_P1__osg_NodeVisitor_P1,
	          "Handle events, return true if handled, false otherwise. ",
	          "");
	I_Method1(void, accept, IN, osgGA::GUIEventHandlerVisitor &, v,
	          Properties::VIRTUAL,
	          __void__accept__osgGA_GUIEventHandlerVisitor_R1,
	          "",
	          "");
	I_Method1(void, getUsage, IN, osg::ApplicationUsage &, x,
	          Properties::VIRTUAL,
	          __void__getUsage__osg_ApplicationUsage_R1,
	          "Get the keyboard and mouse usage of this manipulator. ",
	          "");
	I_Method0(void, doOperation,
	          Properties::NON_VIRTUAL,
	          __void__doOperation,
	          "",
	          "");
	I_SimpleProperty(const std::string &, Command, 
	                 __C5_std_string_R1__getCommand, 
	                 __void__setCommand__C5_std_string_R1);
	I_SimpleProperty(const osgPresentation::KeyPosition &, KeyPosition, 
	                 __C5_osgPresentation_KeyPosition_R1__getKeyPosition, 
	                 __void__setKeyPosition__C5_osgPresentation_KeyPosition_R1);
	I_SimpleProperty(int, LayerNum, 
	                 __int__getLayerNum, 
	                 0);
	I_SimpleProperty(osgPresentation::Operation, Operation, 
	                 __osgPresentation_Operation__getOperation, 
	                 __void__setOperation__osgPresentation_Operation);
	I_SimpleProperty(bool, RelativeJump, 
	                 __bool__getRelativeJump, 
	                 0);
	I_SimpleProperty(int, SlideNum, 
	                 __int__getSlideNum, 
	                 0);
	I_PublicMemberProperty(std::string, _command);
	I_PublicMemberProperty(osgPresentation::KeyPosition, _keyPos);
	I_PublicMemberProperty(osgPresentation::Operation, _operation);
	I_PublicMemberProperty(bool, _relativeJump);
	I_PublicMemberProperty(int, _slideNum);
	I_PublicMemberProperty(int, _layerNum);
END_REFLECTOR

