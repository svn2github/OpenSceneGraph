// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/ApplicationUsage>
#include <osg/CopyOp>
#include <osg/Node>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/Vec3>
#include <osgDB/Callbacks>
#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventAdapter>
#include <osgGA/GUIEventHandler>
#include <osgPresentation/SlideEventHandler>
#include <osgViewer/Viewer>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

#include <osg/observer_ptr>
        
TYPE_NAME_ALIAS(std::set< osg::ref_ptr< osgPresentation::ObjectOperator > COMMA  osgPresentation::dereference_less >, osgPresentation::ActiveOperators::OperatorList)

BEGIN_VALUE_REFLECTOR(osgPresentation::ActiveOperators)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_Constructor0(____ActiveOperators,
	               "",
	               "");
	I_MethodWithDefaults2(void, collect, IN, osg::Node *, incommingNode, , IN, osg::NodeVisitor::TraversalMode, tm, osg::NodeVisitor::TRAVERSE_ACTIVE_CHILDREN,
	                      Properties::NON_VIRTUAL,
	                      __void__collect__osg_Node_P1__osg_NodeVisitor_TraversalMode,
	                      "",
	                      "");
	I_Method0(void, process,
	          Properties::NON_VIRTUAL,
	          __void__process,
	          "",
	          "");
	I_Method1(void, setPause, IN, bool, pause,
	          Properties::NON_VIRTUAL,
	          __void__setPause__bool,
	          "",
	          "");
	I_Method0(bool, getPause,
	          Properties::NON_VIRTUAL,
	          __bool__getPause,
	          "",
	          "");
	I_Method0(void, reset,
	          Properties::NON_VIRTUAL,
	          __void__reset,
	          "",
	          "");
	I_ProtectedMethod0(void, processOutgoing,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__processOutgoing,
	                   "",
	                   "");
	I_ProtectedMethod0(void, processIncomming,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__processIncomming,
	                   "",
	                   "");
	I_ProtectedMethod0(void, processMaintained,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__processMaintained,
	                   "",
	                   "");
	I_SimpleProperty(bool, Pause, 
	                 __bool__getPause, 
	                 __void__setPause__bool);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgPresentation::dereference_less)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_Constructor0(____dereference_less,
	               "",
	               "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgPresentation::FilePathData)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_VirtualBaseType(osg::Referenced);
	I_Constructor1(IN, const osgDB::FilePathList &, fpl,
	               Properties::NON_EXPLICIT,
	               ____FilePathData__C5_osgDB_FilePathList_R1,
	               "",
	               "");
	I_PublicMemberProperty(osgDB::FilePathList, filePathList);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgPresentation::HomePosition)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_VirtualBaseType(osg::Referenced);
	I_Constructor0(____HomePosition,
	               "",
	               "");
	I_Constructor3(IN, const osg::Vec3 &, in_eye, IN, const osg::Vec3 &, in_center, IN, const osg::Vec3 &, in_up,
	               ____HomePosition__C5_osg_Vec3_R1__C5_osg_Vec3_R1__C5_osg_Vec3_R1,
	               "",
	               "");
	I_PublicMemberProperty(osg::Vec3, eye);
	I_PublicMemberProperty(osg::Vec3, center);
	I_PublicMemberProperty(osg::Vec3, up);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgPresentation::KeyPosition)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_ConstructorWithDefaults3(IN, unsigned int, key, 0, IN, float, x, FLT_MAX, IN, float, y, FLT_MAX,
	                           ____KeyPosition__unsigned_int__float__float,
	                           "",
	                           "");
	I_MethodWithDefaults3(void, set, IN, unsigned int, key, 0, IN, float, x, FLT_MAX, IN, float, y, FLT_MAX,
	                      Properties::NON_VIRTUAL,
	                      __void__set__unsigned_int__float__float,
	                      "",
	                      "");
	I_PublicMemberProperty(osgGA::GUIEventAdapter::KeySymbol, _key);
	I_PublicMemberProperty(float, _x);
	I_PublicMemberProperty(float, _y);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< osgPresentation::KeyPosition >, osgPresentation::LayerAttributes::Keys)

TYPE_NAME_ALIAS(std::vector< std::string >, osgPresentation::LayerAttributes::RunStrings)

TYPE_NAME_ALIAS(std::list< osg::ref_ptr< osgPresentation::LayerCallback > >, osgPresentation::LayerAttributes::LayerCallbacks)

BEGIN_OBJECT_REFLECTOR(osgPresentation::LayerAttributes)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_VirtualBaseType(osg::Referenced);
	I_Constructor0(____LayerAttributes,
	               "",
	               "");
	I_Constructor1(IN, double, in_duration,
	               Properties::NON_EXPLICIT,
	               ____LayerAttributes__double,
	               "",
	               "");
	I_Method1(void, setDuration, IN, double, duration,
	          Properties::NON_VIRTUAL,
	          __void__setDuration__double,
	          "",
	          "");
	I_Method0(double, getDuration,
	          Properties::NON_VIRTUAL,
	          __double__getDuration,
	          "",
	          "");
	I_Method1(void, setKeys, IN, const osgPresentation::LayerAttributes::Keys &, keys,
	          Properties::NON_VIRTUAL,
	          __void__setKeys__C5_Keys_R1,
	          "",
	          "");
	I_Method0(const osgPresentation::LayerAttributes::Keys &, getKeys,
	          Properties::NON_VIRTUAL,
	          __C5_Keys_R1__getKeys,
	          "",
	          "");
	I_Method1(void, addKey, IN, const osgPresentation::KeyPosition &, kp,
	          Properties::NON_VIRTUAL,
	          __void__addKey__C5_KeyPosition_R1,
	          "",
	          "");
	I_Method1(void, setRunStrings, IN, const osgPresentation::LayerAttributes::RunStrings &, runStrings,
	          Properties::NON_VIRTUAL,
	          __void__setRunStrings__C5_RunStrings_R1,
	          "",
	          "");
	I_Method0(const osgPresentation::LayerAttributes::RunStrings &, getRunStrings,
	          Properties::NON_VIRTUAL,
	          __C5_RunStrings_R1__getRunStrings,
	          "",
	          "");
	I_Method1(void, addRunString, IN, const std::string &, runString,
	          Properties::NON_VIRTUAL,
	          __void__addRunString__C5_std_string_R1,
	          "",
	          "");
	I_Method3(void, setJump, IN, bool, relativeJump, IN, int, slideNum, IN, int, layerNum,
	          Properties::NON_VIRTUAL,
	          __void__setJump__bool__int__int,
	          "",
	          "");
	I_Method0(bool, getRelativeJump,
	          Properties::NON_VIRTUAL,
	          __bool__getRelativeJump,
	          "",
	          "");
	I_Method0(int, getSlideNum,
	          Properties::NON_VIRTUAL,
	          __int__getSlideNum,
	          "",
	          "");
	I_Method0(int, getLayerNum,
	          Properties::NON_VIRTUAL,
	          __int__getLayerNum,
	          "",
	          "");
	I_Method0(bool, requiresJump,
	          Properties::NON_VIRTUAL,
	          __bool__requiresJump,
	          "",
	          "");
	I_Method1(void, addEnterCallback, IN, osgPresentation::LayerCallback *, lc,
	          Properties::NON_VIRTUAL,
	          __void__addEnterCallback__LayerCallback_P1,
	          "",
	          "");
	I_Method1(void, addLeaveCallback, IN, osgPresentation::LayerCallback *, lc,
	          Properties::NON_VIRTUAL,
	          __void__addLeaveCallback__LayerCallback_P1,
	          "",
	          "");
	I_Method1(void, callEnterCallbacks, IN, osg::Node *, node,
	          Properties::NON_VIRTUAL,
	          __void__callEnterCallbacks__osg_Node_P1,
	          "",
	          "");
	I_Method1(void, callLeaveCallbacks, IN, osg::Node *, node,
	          Properties::NON_VIRTUAL,
	          __void__callLeaveCallbacks__osg_Node_P1,
	          "",
	          "");
	I_SimpleProperty(double, Duration, 
	                 __double__getDuration, 
	                 __void__setDuration__double);
	I_SimpleProperty(const osgPresentation::LayerAttributes::Keys &, Keys, 
	                 __C5_Keys_R1__getKeys, 
	                 __void__setKeys__C5_Keys_R1);
	I_SimpleProperty(int, LayerNum, 
	                 __int__getLayerNum, 
	                 0);
	I_SimpleProperty(bool, RelativeJump, 
	                 __bool__getRelativeJump, 
	                 0);
	I_SimpleProperty(const osgPresentation::LayerAttributes::RunStrings &, RunStrings, 
	                 __C5_RunStrings_R1__getRunStrings, 
	                 __void__setRunStrings__C5_RunStrings_R1);
	I_SimpleProperty(int, SlideNum, 
	                 __int__getSlideNum, 
	                 0);
	I_PublicMemberProperty(double, _duration);
	I_PublicMemberProperty(osgPresentation::LayerAttributes::Keys, _keys);
	I_PublicMemberProperty(osgPresentation::LayerAttributes::RunStrings, _runStrings);
	I_PublicMemberProperty(bool, _relativeJump);
	I_PublicMemberProperty(int, _slideNum);
	I_PublicMemberProperty(int, _layerNum);
	I_PublicMemberProperty(osgPresentation::LayerAttributes::LayerCallbacks, _enterLayerCallbacks);
	I_PublicMemberProperty(osgPresentation::LayerAttributes::LayerCallbacks, _leaveLayerCallbacks);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgPresentation::LayerCallback)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_VirtualBaseType(osg::Referenced);
	I_Constructor0(____LayerCallback,
	               "",
	               "");
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgPresentation::ObjectOperator)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_BaseType(osg::Referenced);
	I_Constructor0(____ObjectOperator,
	               "",
	               "");
	I_Method0(void *, ptr,
	          Properties::PURE_VIRTUAL,
	          __void_P1__ptr,
	          "",
	          "");
	I_Method0(void, enter,
	          Properties::PURE_VIRTUAL,
	          __void__enter,
	          "",
	          "");
	I_Method0(void, maintain,
	          Properties::PURE_VIRTUAL,
	          __void__maintain,
	          "",
	          "");
	I_Method0(void, leave,
	          Properties::PURE_VIRTUAL,
	          __void__leave,
	          "",
	          "");
	I_Method1(void, setPause, IN, bool, pause,
	          Properties::PURE_VIRTUAL,
	          __void__setPause__bool,
	          "",
	          "");
	I_Method0(void, reset,
	          Properties::PURE_VIRTUAL,
	          __void__reset,
	          "",
	          "");
	I_SimpleProperty(bool, Pause, 
	                 0, 
	                 __void__setPause__bool);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgPresentation::SlideEventHandler::WhichPosition)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_EnumLabel(osgPresentation::SlideEventHandler::FIRST_POSITION);
	I_EnumLabel(osgPresentation::SlideEventHandler::LAST_POSITION);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgPresentation::SlideEventHandler)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_BaseType(osgGA::GUIEventHandler);
	I_ConstructorWithDefaults1(IN, osgViewer::Viewer *, viewer, 0,
	                           Properties::NON_EXPLICIT,
	                           ____SlideEventHandler__osgViewer_Viewer_P1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, set, IN, osg::Node *, model,
	          Properties::NON_VIRTUAL,
	          __void__set__osg_Node_P1,
	          "",
	          "");
	I_Method1(void, accept, IN, osgGA::GUIEventHandlerVisitor &, v,
	          Properties::VIRTUAL,
	          __void__accept__osgGA_GUIEventHandlerVisitor_R1,
	          "",
	          "");
	I_Method2(bool, handle, IN, const osgGA::GUIEventAdapter &, x, IN, osgGA::GUIActionAdapter &, x,
	          Properties::VIRTUAL,
	          __bool__handle__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1,
	          "Deprecated, Handle events, return true if handled, false otherwise. ",
	          "");
	I_Method1(void, getUsage, IN, osg::ApplicationUsage &, x,
	          Properties::VIRTUAL,
	          __void__getUsage__osg_ApplicationUsage_R1,
	          "Get the keyboard and mouse usage of this manipulator. ",
	          "");
	I_Method0(osgViewer::Viewer *, getViewer,
	          Properties::NON_VIRTUAL,
	          __osgViewer_Viewer_P1__getViewer,
	          "",
	          "");
	I_Method1(void, compileSlide, IN, unsigned int, slideNum,
	          Properties::NON_VIRTUAL,
	          __void__compileSlide__unsigned_int,
	          "",
	          "");
	I_Method1(void, releaseSlide, IN, unsigned int, slideNum,
	          Properties::NON_VIRTUAL,
	          __void__releaseSlide__unsigned_int,
	          "",
	          "");
	I_Method0(unsigned int, getNumSlides,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getNumSlides,
	          "",
	          "");
	I_Method0(int, getActiveSlide,
	          Properties::NON_VIRTUAL,
	          __int__getActiveSlide,
	          "",
	          "");
	I_Method0(int, getActiveLayer,
	          Properties::NON_VIRTUAL,
	          __int__getActiveLayer,
	          "",
	          "");
	I_MethodWithDefaults2(bool, selectSlide, IN, int, slideNum, , IN, int, layerNum, osgPresentation::SlideEventHandler::FIRST_POSITION,
	                      Properties::NON_VIRTUAL,
	                      __bool__selectSlide__int__int,
	                      "",
	                      "");
	I_Method1(bool, selectLayer, IN, int, layerNum,
	          Properties::NON_VIRTUAL,
	          __bool__selectLayer__int,
	          "",
	          "");
	I_Method0(bool, nextLayerOrSlide,
	          Properties::NON_VIRTUAL,
	          __bool__nextLayerOrSlide,
	          "",
	          "");
	I_Method0(bool, previousLayerOrSlide,
	          Properties::NON_VIRTUAL,
	          __bool__previousLayerOrSlide,
	          "",
	          "");
	I_Method0(bool, nextSlide,
	          Properties::NON_VIRTUAL,
	          __bool__nextSlide,
	          "",
	          "");
	I_Method0(bool, previousSlide,
	          Properties::NON_VIRTUAL,
	          __bool__previousSlide,
	          "",
	          "");
	I_Method0(bool, nextLayer,
	          Properties::NON_VIRTUAL,
	          __bool__nextLayer,
	          "",
	          "");
	I_Method0(bool, previousLayer,
	          Properties::NON_VIRTUAL,
	          __bool__previousLayer,
	          "",
	          "");
	I_Method0(bool, home,
	          Properties::NON_VIRTUAL,
	          __bool__home,
	          "",
	          "");
	I_MethodWithDefaults1(void, setAutoSteppingActive, IN, bool, flag, true,
	                      Properties::NON_VIRTUAL,
	                      __void__setAutoSteppingActive__bool,
	                      "",
	                      "");
	I_Method0(bool, getAutoSteppingActive,
	          Properties::NON_VIRTUAL,
	          __bool__getAutoSteppingActive,
	          "",
	          "");
	I_Method1(void, setTimeDelayBetweenSlides, IN, double, dt,
	          Properties::NON_VIRTUAL,
	          __void__setTimeDelayBetweenSlides__double,
	          "",
	          "");
	I_Method0(double, getTimeDelayBetweenSlides,
	          Properties::NON_VIRTUAL,
	          __double__getTimeDelayBetweenSlides,
	          "",
	          "");
	I_Method1(double, getDuration, IN, const osg::Node *, node,
	          Properties::NON_VIRTUAL,
	          __double__getDuration__C5_osg_Node_P1,
	          "",
	          "");
	I_Method0(double, getCurrentTimeDelayBetweenSlides,
	          Properties::NON_VIRTUAL,
	          __double__getCurrentTimeDelayBetweenSlides,
	          "",
	          "");
	I_Method1(void, setReleaseAndCompileOnEachNewSlide, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setReleaseAndCompileOnEachNewSlide__bool,
	          "",
	          "");
	I_Method0(bool, getReleaseAndCompileOnEachNewSlide,
	          Properties::NON_VIRTUAL,
	          __bool__getReleaseAndCompileOnEachNewSlide,
	          "",
	          "");
	I_Method1(void, setTimeDelayOnNewSlideWithMovies, IN, float, t,
	          Properties::NON_VIRTUAL,
	          __void__setTimeDelayOnNewSlideWithMovies__float,
	          "",
	          "");
	I_Method0(float, getTimeDelayOnNewSlideWithMovies,
	          Properties::NON_VIRTUAL,
	          __float__getTimeDelayOnNewSlideWithMovies,
	          "",
	          "");
	I_Method1(void, setLoopPresentation, IN, bool, loop,
	          Properties::NON_VIRTUAL,
	          __void__setLoopPresentation__bool,
	          "",
	          "");
	I_Method0(bool, getLoopPresentation,
	          Properties::NON_VIRTUAL,
	          __bool__getLoopPresentation,
	          "",
	          "");
	I_Method1(void, dispatchEvent, IN, const osgPresentation::KeyPosition &, keyPosition,
	          Properties::NON_VIRTUAL,
	          __void__dispatchEvent__C5_KeyPosition_R1,
	          "",
	          "");
	I_StaticMethod0(osgPresentation::SlideEventHandler *, instance,
	                __SlideEventHandler_P1__instance_S,
	                "",
	                "");
	I_ProtectedConstructor2(IN, const osgPresentation::SlideEventHandler &, x, IN, const osg::CopyOp &, x,
	                        ____SlideEventHandler__C5_SlideEventHandler_R1__C5_osg_CopyOp_R1,
	                        "",
	                        "");
	I_ProtectedMethod2(bool, home, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, aa,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __bool__home__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1,
	                   "",
	                   "");
	I_ProtectedMethod4(void, updateAlpha, IN, bool, x, IN, bool, x, IN, float, x, IN, float, y,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__updateAlpha__bool__bool__float__float,
	                   "",
	                   "");
	I_ProtectedMethod2(void, updateLight, IN, float, x, IN, float, y,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__updateLight__float__float,
	                   "",
	                   "");
	I_ProtectedMethod0(void, updateOperators,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__updateOperators,
	                   "",
	                   "");
	I_SimpleProperty(int, ActiveLayer, 
	                 __int__getActiveLayer, 
	                 0);
	I_SimpleProperty(int, ActiveSlide, 
	                 __int__getActiveSlide, 
	                 0);
	I_SimpleProperty(bool, AutoSteppingActive, 
	                 __bool__getAutoSteppingActive, 
	                 __void__setAutoSteppingActive__bool);
	I_SimpleProperty(double, CurrentTimeDelayBetweenSlides, 
	                 __double__getCurrentTimeDelayBetweenSlides, 
	                 0);
	I_SimpleProperty(bool, LoopPresentation, 
	                 __bool__getLoopPresentation, 
	                 __void__setLoopPresentation__bool);
	I_SimpleProperty(bool, ReleaseAndCompileOnEachNewSlide, 
	                 __bool__getReleaseAndCompileOnEachNewSlide, 
	                 __void__setReleaseAndCompileOnEachNewSlide__bool);
	I_SimpleProperty(double, TimeDelayBetweenSlides, 
	                 __double__getTimeDelayBetweenSlides, 
	                 __void__setTimeDelayBetweenSlides__double);
	I_SimpleProperty(float, TimeDelayOnNewSlideWithMovies, 
	                 __float__getTimeDelayOnNewSlideWithMovies, 
	                 __void__setTimeDelayOnNewSlideWithMovies__float);
	I_SimpleProperty(osgViewer::Viewer *, Viewer, 
	                 __osgViewer_Viewer_P1__getViewer, 
	                 0);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgPresentation::Operation)
	I_DeclaringFile("osgPresentation/SlideEventHandler");
	I_EnumLabel(osgPresentation::RUN);
	I_EnumLabel(osgPresentation::LOAD);
	I_EnumLabel(osgPresentation::EVENT);
	I_EnumLabel(osgPresentation::JUMP);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osgPresentation::LayerCallback >)
	I_DeclaringFile("osg/ref_ptr");
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osgPresentation::LayerCallback *, ptr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osgPresentation::LayerCallback > &, rp,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Constructor1(IN, osg::observer_ptr< osgPresentation::LayerCallback > &, optr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__observer_ptrT1_T__R1,
	               "",
	               "");
	I_Method0(osgPresentation::LayerCallback *, get,
	          Properties::NON_VIRTUAL,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          Properties::NON_VIRTUAL,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osgPresentation::LayerCallback *, release,
	          Properties::NON_VIRTUAL,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osgPresentation::LayerCallback > &, rp,
	          Properties::NON_VIRTUAL,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osgPresentation::LayerCallback *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osgPresentation::ObjectOperator >)
	I_DeclaringFile("osg/ref_ptr");
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osgPresentation::ObjectOperator *, ptr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osgPresentation::ObjectOperator > &, rp,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Constructor1(IN, osg::observer_ptr< osgPresentation::ObjectOperator > &, optr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__observer_ptrT1_T__R1,
	               "",
	               "");
	I_Method0(osgPresentation::ObjectOperator *, get,
	          Properties::NON_VIRTUAL,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          Properties::NON_VIRTUAL,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osgPresentation::ObjectOperator *, release,
	          Properties::NON_VIRTUAL,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osgPresentation::ObjectOperator > &, rp,
	          Properties::NON_VIRTUAL,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osgPresentation::ObjectOperator *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

STD_LIST_REFLECTOR(std::list< osg::ref_ptr< osgPresentation::LayerCallback > >)

STD_SET_REFLECTOR(std::set< osg::ref_ptr< osgPresentation::ObjectOperator > COMMA  osgPresentation::dereference_less >)

STD_VECTOR_REFLECTOR(std::vector< osgPresentation::KeyPosition >)

