// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Matrixd>
#include <osg/Node>
#include <osg/Object>
#include <osg/Vec3d>
#include <osgGA/TerrainManipulator>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

#include <osg/observer_ptr>
        
BEGIN_ENUM_REFLECTOR(osgGA::TerrainManipulator::RotationMode)
	I_DeclaringFile("osgGA/TerrainManipulator");
	I_EnumLabel(osgGA::TerrainManipulator::ELEVATION_AZIM_ROLL);
	I_EnumLabel(osgGA::TerrainManipulator::ELEVATION_AZIM);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgGA::TerrainManipulator)
	I_DeclaringFile("osgGA/TerrainManipulator");
	I_BaseType(osgGA::OrbitManipulator);
	I_ConstructorWithDefaults1(IN, int, flags, osgGA::StandardManipulator::DEFAULT_SETTINGS,
	                           Properties::NON_EXPLICIT,
	                           ____TerrainManipulator__int,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osgGA::TerrainManipulator &, tm, , IN, const osg::CopyOp &, copyOp, osg::CopyOp::SHALLOW_COPY,
	                           ____TerrainManipulator__C5_TerrainManipulator_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, setRotationMode, IN, osgGA::TerrainManipulator::RotationMode, mode,
	          Properties::VIRTUAL,
	          __void__setRotationMode__RotationMode,
	          "",
	          "");
	I_Method0(osgGA::TerrainManipulator::RotationMode, getRotationMode,
	          Properties::NON_VIRTUAL,
	          __RotationMode__getRotationMode,
	          "",
	          "");
	I_Method1(void, setByMatrix, IN, const osg::Matrixd &, matrix,
	          Properties::VIRTUAL,
	          __void__setByMatrix__C5_osg_Matrixd_R1,
	          "set the position of the matrix manipulator using a 4x4 Matrix. ",
	          "");
	I_Method3(void, setTransformation, IN, const osg::Vec3d &, eye, IN, const osg::Vec3d &, center, IN, const osg::Vec3d &, up,
	          Properties::VIRTUAL,
	          __void__setTransformation__C5_osg_Vec3d_R1__C5_osg_Vec3d_R1__C5_osg_Vec3d_R1,
	          "",
	          "");
	I_Method1(void, setNode, IN, osg::Node *, x,
	          Properties::VIRTUAL,
	          __void__setNode__osg_Node_P1,
	          "Attach a node to the manipulator, automatically detaching any previously attached node. ",
	          "setNode(NULL) detaches previous nodes. May be ignored by manipulators which do not require a reference model. ");
	I_ProtectedMethod3(bool, performMovementMiddleMouseButton, IN, const double, eventTimeDelta, IN, const double, dx, IN, const double, dy,
	                   Properties::VIRTUAL,
	                   Properties::NON_CONST,
	                   __bool__performMovementMiddleMouseButton__C5_double__C5_double__C5_double,
	                   "",
	                   "");
	I_ProtectedMethod3(bool, performMovementRightMouseButton, IN, const double, eventTimeDelta, IN, const double, dx, IN, const double, dy,
	                   Properties::VIRTUAL,
	                   Properties::NON_CONST,
	                   __bool__performMovementRightMouseButton__C5_double__C5_double__C5_double,
	                   "",
	                   "");
	I_ProtectedMethod3(bool, intersect, IN, const osg::Vec3d &, start, IN, const osg::Vec3d &, end, IN, osg::Vec3d &, intersection,
	                   Properties::NON_VIRTUAL,
	                   Properties::CONST,
	                   __bool__intersect__C5_osg_Vec3d_R1__C5_osg_Vec3d_R1__osg_Vec3d_R1,
	                   "",
	                   "");
	I_ProtectedMethod0(void, clampOrientation,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__clampOrientation,
	                   "",
	                   "");
	I_SimpleProperty(const osg::Matrixd &, ByMatrix, 
	                 0, 
	                 __void__setByMatrix__C5_osg_Matrixd_R1);
	I_SimpleProperty(osg::Node *, Node, 
	                 0, 
	                 __void__setNode__osg_Node_P1);
	I_SimpleProperty(osgGA::TerrainManipulator::RotationMode, RotationMode, 
	                 __RotationMode__getRotationMode, 
	                 __void__setRotationMode__RotationMode);
END_REFLECTOR

