// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Array>
#include <osg/BufferObject>
#include <osg/CopyOp>
#include <osg/FrameStamp>
#include <osg/Image>
#include <osg/Object>
#include <osg/PrimitiveSet>
#include <osg/State>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::BufferData)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::Object);
	I_Constructor0(____BufferData,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::BufferData &, bd, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____BufferData__C5_BufferData_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method0(const GLvoid *, getDataPointer,
	          Properties::PURE_VIRTUAL,
	          __C5_GLvoid_P1__getDataPointer,
	          "",
	          "");
	I_Method0(unsigned int, getTotalDataSize,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__getTotalDataSize,
	          "",
	          "");
	I_Method1(void, setBufferObject, IN, osg::BufferObject *, bufferObject,
	          Properties::NON_VIRTUAL,
	          __void__setBufferObject__BufferObject_P1,
	          "",
	          "");
	I_Method0(osg::BufferObject *, getBufferObject,
	          Properties::NON_VIRTUAL,
	          __BufferObject_P1__getBufferObject,
	          "",
	          "");
	I_Method0(const osg::BufferObject *, getBufferObject,
	          Properties::NON_VIRTUAL,
	          __C5_BufferObject_P1__getBufferObject,
	          "",
	          "");
	I_Method1(void, setBufferIndex, IN, unsigned int, index,
	          Properties::NON_VIRTUAL,
	          __void__setBufferIndex__unsigned_int,
	          "",
	          "");
	I_Method0(unsigned int, getBufferIndex,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getBufferIndex,
	          "",
	          "");
	I_Method1(osg::GLBufferObject *, getGLBufferObject, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __GLBufferObject_P1__getGLBufferObject__unsigned_int,
	          "",
	          "");
	I_Method1(osg::GLBufferObject *, getOrCreateGLBufferObject, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __GLBufferObject_P1__getOrCreateGLBufferObject__unsigned_int,
	          "",
	          "");
	I_Method1(void, setModifiedCallback, IN, osg::BufferData::ModifiedCallback *, md,
	          Properties::NON_VIRTUAL,
	          __void__setModifiedCallback__ModifiedCallback_P1,
	          "",
	          "");
	I_Method0(osg::BufferData::ModifiedCallback *, getModifiedCallback,
	          Properties::NON_VIRTUAL,
	          __ModifiedCallback_P1__getModifiedCallback,
	          "",
	          "");
	I_Method0(const osg::BufferData::ModifiedCallback *, getModifiedCallback,
	          Properties::NON_VIRTUAL,
	          __C5_ModifiedCallback_P1__getModifiedCallback,
	          "",
	          "");
	I_Method0(void, dirty,
	          Properties::NON_VIRTUAL,
	          __void__dirty,
	          "Dirty the primitive, which increments the modified count, to force buffer objects to update. ",
	          "If a ModifiedCallback is attached to this BufferData then the callback is called prior to the bufferObject's dirty is called. ");
	I_Method1(void, setModifiedCount, IN, unsigned int, value,
	          Properties::NON_VIRTUAL,
	          __void__setModifiedCount__unsigned_int,
	          "Set the modified count value. ",
	          "");
	I_Method0(unsigned int, getModifiedCount,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getModifiedCount,
	          "Get modified count value. ",
	          "");
	I_SimpleProperty(unsigned int, BufferIndex, 
	                 __unsigned_int__getBufferIndex, 
	                 __void__setBufferIndex__unsigned_int);
	I_SimpleProperty(osg::BufferObject *, BufferObject, 
	                 __BufferObject_P1__getBufferObject, 
	                 __void__setBufferObject__BufferObject_P1);
	I_SimpleProperty(const GLvoid *, DataPointer, 
	                 __C5_GLvoid_P1__getDataPointer, 
	                 0);
	I_SimpleProperty(osg::BufferData::ModifiedCallback *, ModifiedCallback, 
	                 __ModifiedCallback_P1__getModifiedCallback, 
	                 __void__setModifiedCallback__ModifiedCallback_P1);
	I_SimpleProperty(unsigned int, ModifiedCount, 
	                 __unsigned_int__getModifiedCount, 
	                 __void__setModifiedCount__unsigned_int);
	I_SimpleProperty(unsigned int, TotalDataSize, 
	                 __unsigned_int__getTotalDataSize, 
	                 0);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::BufferData::ModifiedCallback)
	I_DeclaringFile("osg/BufferObject");
	I_VirtualBaseType(osg::Object);
	I_Constructor0(____ModifiedCallback,
	               "",
	               "");
	I_Constructor2(IN, const osg::BufferData::ModifiedCallback &, x, IN, const osg::CopyOp &, x,
	               ____ModifiedCallback__C5_ModifiedCallback_R1__C5_CopyOp_R1,
	               "",
	               "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, modified, IN, osg::BufferData *, x,
	          Properties::VIRTUAL,
	          __void__modified__BufferData_P1,
	          "",
	          "");
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::BufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::Object);
	I_Constructor0(____BufferObject,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::BufferObject &, bo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____BufferObject__C5_BufferObject_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, setTarget, IN, GLenum, target,
	          Properties::NON_VIRTUAL,
	          __void__setTarget__GLenum,
	          "",
	          "");
	I_Method0(GLenum, getTarget,
	          Properties::NON_VIRTUAL,
	          __GLenum__getTarget,
	          "",
	          "");
	I_Method1(void, setUsage, IN, GLenum, usage,
	          Properties::NON_VIRTUAL,
	          __void__setUsage__GLenum,
	          "Set what type of usage the buffer object will have. ",
	          "Options are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY. ");
	I_Method0(GLenum, getUsage,
	          Properties::NON_VIRTUAL,
	          __GLenum__getUsage,
	          "Get the type of usage the buffer object has been set up for. ",
	          "");
	I_Method0(osg::BufferObjectProfile &, getProfile,
	          Properties::NON_VIRTUAL,
	          __BufferObjectProfile_R1__getProfile,
	          "",
	          "");
	I_Method0(const osg::BufferObjectProfile &, getProfile,
	          Properties::NON_VIRTUAL,
	          __C5_BufferObjectProfile_R1__getProfile,
	          "",
	          "");
	I_Method0(void, dirty,
	          Properties::NON_VIRTUAL,
	          __void__dirty,
	          "",
	          "");
	I_Method1(void, resizeGLObjectBuffers, IN, unsigned int, maxSize,
	          Properties::VIRTUAL,
	          __void__resizeGLObjectBuffers__unsigned_int,
	          "Resize any per context GLObject buffers to specified size. ",
	          "");
	I_MethodWithDefaults1(void, releaseGLObjects, IN, osg::State *, state, 0,
	                      Properties::VIRTUAL,
	                      __void__releaseGLObjects__State_P1,
	                      "If State is non-zero, this function releases OpenGL objects for the specified graphics context. ",
	                      "Otherwise, releases OpenGL objects for all graphics contexts. ");
	I_Method1(unsigned int, addBufferData, IN, osg::BufferData *, bd,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__addBufferData__BufferData_P1,
	          "",
	          "");
	I_Method1(void, removeBufferData, IN, unsigned int, index,
	          Properties::NON_VIRTUAL,
	          __void__removeBufferData__unsigned_int,
	          "",
	          "");
	I_Method1(void, removeBufferData, IN, osg::BufferData *, bd,
	          Properties::NON_VIRTUAL,
	          __void__removeBufferData__BufferData_P1,
	          "",
	          "");
	I_Method2(void, setBufferData, IN, unsigned int, index, IN, osg::BufferData *, bd,
	          Properties::NON_VIRTUAL,
	          __void__setBufferData__unsigned_int__BufferData_P1,
	          "",
	          "");
	I_Method1(osg::BufferData *, getBufferData, IN, unsigned int, index,
	          Properties::NON_VIRTUAL,
	          __BufferData_P1__getBufferData__unsigned_int,
	          "",
	          "");
	I_Method1(const osg::BufferData *, getBufferData, IN, unsigned int, index,
	          Properties::NON_VIRTUAL,
	          __C5_BufferData_P1__getBufferData__unsigned_int,
	          "",
	          "");
	I_Method0(unsigned int, getNumBufferData,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getNumBufferData,
	          "",
	          "");
	I_Method2(void, setGLBufferObject, IN, unsigned int, contextID, IN, osg::GLBufferObject *, glbo,
	          Properties::NON_VIRTUAL,
	          __void__setGLBufferObject__unsigned_int__GLBufferObject_P1,
	          "",
	          "");
	I_Method1(osg::GLBufferObject *, getGLBufferObject, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __GLBufferObject_P1__getGLBufferObject__unsigned_int,
	          "",
	          "");
	I_Method1(osg::GLBufferObject *, getOrCreateGLBufferObject, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __GLBufferObject_P1__getOrCreateGLBufferObject__unsigned_int,
	          "",
	          "");
	I_Method0(unsigned int, computeRequiredBufferSize,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__computeRequiredBufferSize,
	          "",
	          "");
	I_StaticMethod2(void, deleteBufferObject, IN, unsigned int, contextID, IN, GLuint, globj,
	                __void__deleteBufferObject__unsigned_int__GLuint_S,
	                "deprecated, provided for backwards compatibility. ",
	                "");
	I_ArrayProperty(osg::BufferData *, BufferData, 
	                __BufferData_P1__getBufferData__unsigned_int, 
	                __void__setBufferData__unsigned_int__BufferData_P1, 
	                __unsigned_int__getNumBufferData, 
	                __unsigned_int__addBufferData__BufferData_P1, 
	                0, 
	                __void__removeBufferData__unsigned_int);
	I_IndexedProperty(osg::GLBufferObject *, GLBufferObject, 
	                  __GLBufferObject_P1__getGLBufferObject__unsigned_int, 
	                  __void__setGLBufferObject__unsigned_int__GLBufferObject_P1, 
	                  0);
	I_SimpleProperty(osg::BufferObjectProfile &, Profile, 
	                 __BufferObjectProfile_R1__getProfile, 
	                 0);
	I_SimpleProperty(GLenum, Target, 
	                 __GLenum__getTarget, 
	                 __void__setTarget__GLenum);
	I_SimpleProperty(GLenum, Usage, 
	                 __GLenum__getUsage, 
	                 __void__setUsage__GLenum);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::BufferObjectProfile)
	I_DeclaringFile("osg/BufferObject");
	I_Constructor0(____BufferObjectProfile,
	               "",
	               "");
	I_Constructor3(IN, GLenum, target, IN, GLenum, usage, IN, unsigned int, size,
	               ____BufferObjectProfile__GLenum__GLenum__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::BufferObjectProfile &, bpo,
	               Properties::NON_EXPLICIT,
	               ____BufferObjectProfile__C5_BufferObjectProfile_R1,
	               "",
	               "");
	I_Method3(void, setProfile, IN, GLenum, target, IN, GLenum, usage, IN, unsigned int, size,
	          Properties::NON_VIRTUAL,
	          __void__setProfile__GLenum__GLenum__unsigned_int,
	          "",
	          "");
	I_PublicMemberProperty(GLenum, _target);
	I_PublicMemberProperty(GLenum, _usage);
	I_PublicMemberProperty(GLenum, _size);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::ElementBufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::BufferObject);
	I_Constructor0(____ElementBufferObject,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::ElementBufferObject &, pbo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____ElementBufferObject__C5_ElementBufferObject_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(unsigned int, addDrawElements, IN, osg::DrawElements *, PrimitiveSet,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__addDrawElements__osg_DrawElements_P1,
	          "",
	          "");
	I_Method1(void, removeDrawElements, IN, osg::DrawElements *, PrimitiveSet,
	          Properties::NON_VIRTUAL,
	          __void__removeDrawElements__osg_DrawElements_P1,
	          "",
	          "");
	I_Method2(void, setDrawElements, IN, unsigned int, i, IN, osg::DrawElements *, PrimitiveSet,
	          Properties::NON_VIRTUAL,
	          __void__setDrawElements__unsigned_int__DrawElements_P1,
	          "",
	          "");
	I_Method1(osg::DrawElements *, getDrawElements, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __DrawElements_P1__getDrawElements__unsigned_int,
	          "",
	          "");
	I_Method1(const osg::DrawElements *, getDrawElements, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __C5_DrawElements_P1__getDrawElements__unsigned_int,
	          "",
	          "");
	I_IndexedProperty(osg::DrawElements *, DrawElements, 
	                  __DrawElements_P1__getDrawElements__unsigned_int, 
	                  __void__setDrawElements__unsigned_int__DrawElements_P1, 
	                  0);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::GLBufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::Referenced);
	I_ConstructorWithDefaults3(IN, unsigned int, contextID, , IN, osg::BufferObject *, bufferObject, , IN, unsigned int, glObjectID, 0,
	                           ____GLBufferObject__unsigned_int__BufferObject_P1__unsigned_int,
	                           "",
	                           "");
	I_Method1(void, setProfile, IN, const osg::BufferObjectProfile &, profile,
	          Properties::NON_VIRTUAL,
	          __void__setProfile__C5_BufferObjectProfile_R1,
	          "",
	          "");
	I_Method0(const osg::BufferObjectProfile &, getProfile,
	          Properties::NON_VIRTUAL,
	          __C5_BufferObjectProfile_R1__getProfile,
	          "",
	          "");
	I_Method1(void, setBufferObject, IN, osg::BufferObject *, bufferObject,
	          Properties::NON_VIRTUAL,
	          __void__setBufferObject__BufferObject_P1,
	          "",
	          "");
	I_Method0(osg::BufferObject *, getBufferObject,
	          Properties::NON_VIRTUAL,
	          __BufferObject_P1__getBufferObject,
	          "",
	          "");
	I_Method0(unsigned int, getContextID,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getContextID,
	          "",
	          "");
	I_Method0(GLuint &, getGLObjectID,
	          Properties::NON_VIRTUAL,
	          __GLuint_R1__getGLObjectID,
	          "",
	          "");
	I_Method0(GLuint, getGLObjectID,
	          Properties::NON_VIRTUAL,
	          __GLuint__getGLObjectID,
	          "",
	          "");
	I_Method1(GLsizeiptrARB, getOffset, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __GLsizeiptrARB__getOffset__unsigned_int,
	          "",
	          "");
	I_Method0(void, bindBuffer,
	          Properties::NON_VIRTUAL,
	          __void__bindBuffer,
	          "",
	          "");
	I_Method0(void, unbindBuffer,
	          Properties::NON_VIRTUAL,
	          __void__unbindBuffer,
	          "",
	          "");
	I_Method0(bool, isDirty,
	          Properties::NON_VIRTUAL,
	          __bool__isDirty,
	          "",
	          "");
	I_Method0(void, dirty,
	          Properties::NON_VIRTUAL,
	          __void__dirty,
	          "",
	          "");
	I_Method0(void, clear,
	          Properties::NON_VIRTUAL,
	          __void__clear,
	          "",
	          "");
	I_Method0(void, compileBuffer,
	          Properties::NON_VIRTUAL,
	          __void__compileBuffer,
	          "",
	          "");
	I_Method0(void, deleteGLObject,
	          Properties::NON_VIRTUAL,
	          __void__deleteGLObject,
	          "",
	          "");
	I_Method1(void, assign, IN, osg::BufferObject *, bufferObject,
	          Properties::NON_VIRTUAL,
	          __void__assign__BufferObject_P1,
	          "",
	          "");
	I_Method0(bool, isPBOSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isPBOSupported,
	          "",
	          "");
	I_StaticMethod2(osg::GLBufferObject *, createGLBufferObject, IN, unsigned int, contextID, IN, const osg::BufferObject *, bufferObject,
	                __GLBufferObject_P1__createGLBufferObject__unsigned_int__C5_BufferObject_P1_S,
	                "",
	                "");
	I_StaticMethod1(void, deleteAllBufferObjects, IN, unsigned int, contextID,
	                __void__deleteAllBufferObjects__unsigned_int_S,
	                "",
	                "");
	I_StaticMethod1(void, discardAllBufferObjects, IN, unsigned int, contextID,
	                __void__discardAllBufferObjects__unsigned_int_S,
	                "",
	                "");
	I_StaticMethod1(void, flushAllDeletedBufferObjects, IN, unsigned int, contextID,
	                __void__flushAllDeletedBufferObjects__unsigned_int_S,
	                "",
	                "");
	I_StaticMethod1(void, discardAllDeletedBufferObjects, IN, unsigned int, contextID,
	                __void__discardAllDeletedBufferObjects__unsigned_int_S,
	                "",
	                "");
	I_StaticMethod3(void, flushDeletedBufferObjects, IN, unsigned int, contextID, IN, double, currentTime, IN, double &, availbleTime,
	                __void__flushDeletedBufferObjects__unsigned_int__double__double_R1_S,
	                "",
	                "");
	I_StaticMethod2(void, releaseGLBufferObject, IN, unsigned int, contextID, IN, osg::GLBufferObject *, to,
	                __void__releaseGLBufferObject__unsigned_int__GLBufferObject_P1_S,
	                "",
	                "");
	I_StaticMethod2(osg::GLBufferObject::Extensions *, getExtensions, IN, unsigned int, contextID, IN, bool, createIfNotInitalized,
	                __Extensions_P1__getExtensions__unsigned_int__bool_S,
	                "Function to call to get the extension of a specified context. ",
	                "If the Extension object for that context has not yet been created and the 'createIfNotInitalized' flag been set to false then returns NULL. If 'createIfNotInitalized' is true then the Extensions object is automatically created. However, in this case the extension object is only created with the graphics context associated with ContextID.. ");
	I_StaticMethod2(void, setExtensions, IN, unsigned int, contextID, IN, osg::GLBufferObject::Extensions *, extensions,
	                __void__setExtensions__unsigned_int__Extensions_P1_S,
	                "setExtensions allows users to override the extensions across graphics contexts. ",
	                "typically used when you have different extensions supported across graphics pipes but need to ensure that they all use the same low common denominator extensions. ");
	I_SimpleProperty(osg::BufferObject *, BufferObject, 
	                 __BufferObject_P1__getBufferObject, 
	                 __void__setBufferObject__BufferObject_P1);
	I_SimpleProperty(unsigned int, ContextID, 
	                 __unsigned_int__getContextID, 
	                 0);
	I_SimpleProperty(GLuint, GLObjectID, 
	                 __GLuint__getGLObjectID, 
	                 0);
	I_SimpleProperty(const osg::BufferObjectProfile &, Profile, 
	                 __C5_BufferObjectProfile_R1__getProfile, 
	                 __void__setProfile__C5_BufferObjectProfile_R1);
	I_PublicMemberProperty(osg::GLBufferObjectSet *, _set);
	I_PublicMemberProperty(osg::GLBufferObject *, _previous);
	I_PublicMemberProperty(osg::GLBufferObject *, _next);
	I_PublicMemberProperty(unsigned int, _frameLastUsed);
	I_PublicMemberProperty(osg::GLBufferObject::Extensions *, _extensions);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::GLBufferObject::BufferEntry)
	I_DeclaringFile("osg/BufferObject");
	I_Constructor0(____BufferEntry,
	               "",
	               "");
	I_Constructor1(IN, const osg::GLBufferObject::BufferEntry &, rhs,
	               Properties::NON_EXPLICIT,
	               ____BufferEntry__C5_BufferEntry_R1,
	               "",
	               "");
	I_PublicMemberProperty(unsigned int, modifiedCount);
	I_PublicMemberProperty(unsigned int, dataSize);
	I_PublicMemberProperty(unsigned int, offset);
	I_PublicMemberProperty(osg::BufferData *, dataSource);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::GLBufferObjectManager)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::Referenced);
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____GLBufferObjectManager__unsigned_int,
	               "",
	               "");
	I_Method0(unsigned int, getContextID,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getContextID,
	          "",
	          "");
	I_Method1(void, setNumberActiveGLBufferObjects, IN, unsigned int, size,
	          Properties::NON_VIRTUAL,
	          __void__setNumberActiveGLBufferObjects__unsigned_int,
	          "",
	          "");
	I_Method0(unsigned int &, getNumberActiveGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __unsigned_int_R1__getNumberActiveGLBufferObjects,
	          "",
	          "");
	I_Method0(unsigned int, getNumberActiveGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getNumberActiveGLBufferObjects,
	          "",
	          "");
	I_Method1(void, setNumberOrphanedGLBufferObjects, IN, unsigned int, size,
	          Properties::NON_VIRTUAL,
	          __void__setNumberOrphanedGLBufferObjects__unsigned_int,
	          "",
	          "");
	I_Method0(unsigned int &, getNumberOrphanedGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __unsigned_int_R1__getNumberOrphanedGLBufferObjects,
	          "",
	          "");
	I_Method0(unsigned int, getNumberOrphanedGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getNumberOrphanedGLBufferObjects,
	          "",
	          "");
	I_Method1(void, setCurrGLBufferObjectPoolSize, IN, unsigned int, size,
	          Properties::NON_VIRTUAL,
	          __void__setCurrGLBufferObjectPoolSize__unsigned_int,
	          "",
	          "");
	I_Method0(unsigned int &, getCurrGLBufferObjectPoolSize,
	          Properties::NON_VIRTUAL,
	          __unsigned_int_R1__getCurrGLBufferObjectPoolSize,
	          "",
	          "");
	I_Method0(unsigned int, getCurrGLBufferObjectPoolSize,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getCurrGLBufferObjectPoolSize,
	          "",
	          "");
	I_Method1(void, setMaxGLBufferObjectPoolSize, IN, unsigned int, size,
	          Properties::NON_VIRTUAL,
	          __void__setMaxGLBufferObjectPoolSize__unsigned_int,
	          "",
	          "");
	I_Method0(unsigned int, getMaxGLBufferObjectPoolSize,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getMaxGLBufferObjectPoolSize,
	          "",
	          "");
	I_Method1(bool, hasSpace, IN, unsigned int, size,
	          Properties::NON_VIRTUAL,
	          __bool__hasSpace__unsigned_int,
	          "",
	          "");
	I_Method1(bool, makeSpace, IN, unsigned int, size,
	          Properties::NON_VIRTUAL,
	          __bool__makeSpace__unsigned_int,
	          "",
	          "");
	I_Method1(osg::GLBufferObject *, generateGLBufferObject, IN, const osg::BufferObject *, bufferObject,
	          Properties::NON_VIRTUAL,
	          __GLBufferObject_P1__generateGLBufferObject__C5_osg_BufferObject_P1,
	          "",
	          "");
	I_Method0(void, handlePendingOrphandedGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__handlePendingOrphandedGLBufferObjects,
	          "",
	          "");
	I_Method0(void, deleteAllGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__deleteAllGLBufferObjects,
	          "",
	          "");
	I_Method0(void, discardAllGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__discardAllGLBufferObjects,
	          "",
	          "");
	I_Method0(void, flushAllDeletedGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__flushAllDeletedGLBufferObjects,
	          "",
	          "");
	I_Method0(void, discardAllDeletedGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__discardAllDeletedGLBufferObjects,
	          "",
	          "");
	I_Method2(void, flushDeletedGLBufferObjects, IN, double, currentTime, IN, double &, availableTime,
	          Properties::NON_VIRTUAL,
	          __void__flushDeletedGLBufferObjects__double__double_R1,
	          "",
	          "");
	I_Method1(void, releaseGLBufferObject, IN, osg::GLBufferObject *, to,
	          Properties::NON_VIRTUAL,
	          __void__releaseGLBufferObject__GLBufferObject_P1,
	          "",
	          "");
	I_Method1(osg::GLBufferObjectSet *, getGLBufferObjectSet, IN, const osg::BufferObjectProfile &, profile,
	          Properties::NON_VIRTUAL,
	          __GLBufferObjectSet_P1__getGLBufferObjectSet__C5_BufferObjectProfile_R1,
	          "",
	          "");
	I_Method1(void, newFrame, IN, osg::FrameStamp *, fs,
	          Properties::NON_VIRTUAL,
	          __void__newFrame__osg_FrameStamp_P1,
	          "",
	          "");
	I_Method0(void, resetStats,
	          Properties::NON_VIRTUAL,
	          __void__resetStats,
	          "",
	          "");
	I_Method0(void, reportStats,
	          Properties::NON_VIRTUAL,
	          __void__reportStats,
	          "",
	          "");
	I_Method0(unsigned int &, getFrameNumber,
	          Properties::NON_VIRTUAL,
	          __unsigned_int_R1__getFrameNumber,
	          "",
	          "");
	I_Method0(unsigned int &, getNumberFrames,
	          Properties::NON_VIRTUAL,
	          __unsigned_int_R1__getNumberFrames,
	          "",
	          "");
	I_Method0(unsigned int &, getNumberDeleted,
	          Properties::NON_VIRTUAL,
	          __unsigned_int_R1__getNumberDeleted,
	          "",
	          "");
	I_Method0(double &, getDeleteTime,
	          Properties::NON_VIRTUAL,
	          __double_R1__getDeleteTime,
	          "",
	          "");
	I_Method0(unsigned int &, getNumberGenerated,
	          Properties::NON_VIRTUAL,
	          __unsigned_int_R1__getNumberGenerated,
	          "",
	          "");
	I_Method0(double &, getGenerateTime,
	          Properties::NON_VIRTUAL,
	          __double_R1__getGenerateTime,
	          "",
	          "");
	I_Method0(unsigned int &, getNumberApplied,
	          Properties::NON_VIRTUAL,
	          __unsigned_int_R1__getNumberApplied,
	          "",
	          "");
	I_Method0(double &, getApplyTime,
	          Properties::NON_VIRTUAL,
	          __double_R1__getApplyTime,
	          "",
	          "");
	I_StaticMethod1(osg::ref_ptr< osg::GLBufferObjectManager > &, getGLBufferObjectManager, IN, unsigned int, contextID,
	                __osg_ref_ptrT1_GLBufferObjectManager__R1__getGLBufferObjectManager__unsigned_int_S,
	                "",
	                "");
	I_SimpleProperty(double &, ApplyTime, 
	                 __double_R1__getApplyTime, 
	                 0);
	I_SimpleProperty(unsigned int, ContextID, 
	                 __unsigned_int__getContextID, 
	                 0);
	I_SimpleProperty(unsigned int, CurrGLBufferObjectPoolSize, 
	                 __unsigned_int__getCurrGLBufferObjectPoolSize, 
	                 __void__setCurrGLBufferObjectPoolSize__unsigned_int);
	I_SimpleProperty(double &, DeleteTime, 
	                 __double_R1__getDeleteTime, 
	                 0);
	I_SimpleProperty(unsigned int &, FrameNumber, 
	                 __unsigned_int_R1__getFrameNumber, 
	                 0);
	I_SimpleProperty(double &, GenerateTime, 
	                 __double_R1__getGenerateTime, 
	                 0);
	I_SimpleProperty(unsigned int, MaxGLBufferObjectPoolSize, 
	                 __unsigned_int__getMaxGLBufferObjectPoolSize, 
	                 __void__setMaxGLBufferObjectPoolSize__unsigned_int);
	I_SimpleProperty(unsigned int, NumberActiveGLBufferObjects, 
	                 __unsigned_int__getNumberActiveGLBufferObjects, 
	                 __void__setNumberActiveGLBufferObjects__unsigned_int);
	I_SimpleProperty(unsigned int &, NumberApplied, 
	                 __unsigned_int_R1__getNumberApplied, 
	                 0);
	I_SimpleProperty(unsigned int &, NumberDeleted, 
	                 __unsigned_int_R1__getNumberDeleted, 
	                 0);
	I_SimpleProperty(unsigned int &, NumberFrames, 
	                 __unsigned_int_R1__getNumberFrames, 
	                 0);
	I_SimpleProperty(unsigned int &, NumberGenerated, 
	                 __unsigned_int_R1__getNumberGenerated, 
	                 0);
	I_SimpleProperty(unsigned int, NumberOrphanedGLBufferObjects, 
	                 __unsigned_int__getNumberOrphanedGLBufferObjects, 
	                 __void__setNumberOrphanedGLBufferObjects__unsigned_int);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::GLBufferObjectSet)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::Referenced);
	I_Constructor2(IN, osg::GLBufferObjectManager *, parent, IN, const osg::BufferObjectProfile &, profile,
	               ____GLBufferObjectSet__GLBufferObjectManager_P1__C5_BufferObjectProfile_R1,
	               "",
	               "");
	I_Method0(void, handlePendingOrphandedGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__handlePendingOrphandedGLBufferObjects,
	          "",
	          "");
	I_Method0(void, deleteAllGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__deleteAllGLBufferObjects,
	          "",
	          "");
	I_Method0(void, discardAllGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__discardAllGLBufferObjects,
	          "",
	          "");
	I_Method0(void, flushAllDeletedGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__flushAllDeletedGLBufferObjects,
	          "",
	          "");
	I_Method0(void, discardAllDeletedGLBufferObjects,
	          Properties::NON_VIRTUAL,
	          __void__discardAllDeletedGLBufferObjects,
	          "",
	          "");
	I_Method2(void, flushDeletedGLBufferObjects, IN, double, currentTime, IN, double &, availableTime,
	          Properties::NON_VIRTUAL,
	          __void__flushDeletedGLBufferObjects__double__double_R1,
	          "",
	          "");
	I_Method1(osg::GLBufferObject *, takeFromOrphans, IN, osg::BufferObject *, bufferObject,
	          Properties::NON_VIRTUAL,
	          __GLBufferObject_P1__takeFromOrphans__BufferObject_P1,
	          "",
	          "");
	I_Method1(osg::GLBufferObject *, takeOrGenerate, IN, osg::BufferObject *, bufferObject,
	          Properties::NON_VIRTUAL,
	          __GLBufferObject_P1__takeOrGenerate__BufferObject_P1,
	          "",
	          "");
	I_Method1(void, moveToBack, IN, osg::GLBufferObject *, to,
	          Properties::NON_VIRTUAL,
	          __void__moveToBack__GLBufferObject_P1,
	          "",
	          "");
	I_Method1(void, addToBack, IN, osg::GLBufferObject *, to,
	          Properties::NON_VIRTUAL,
	          __void__addToBack__GLBufferObject_P1,
	          "",
	          "");
	I_Method1(void, orphan, IN, osg::GLBufferObject *, to,
	          Properties::NON_VIRTUAL,
	          __void__orphan__GLBufferObject_P1,
	          "",
	          "");
	I_Method1(void, remove, IN, osg::GLBufferObject *, to,
	          Properties::NON_VIRTUAL,
	          __void__remove__GLBufferObject_P1,
	          "",
	          "");
	I_Method2(void, moveToSet, IN, osg::GLBufferObject *, to, IN, osg::GLBufferObjectSet *, set,
	          Properties::NON_VIRTUAL,
	          __void__moveToSet__GLBufferObject_P1__GLBufferObjectSet_P1,
	          "",
	          "");
	I_Method0(unsigned int, size,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__size,
	          "",
	          "");
	I_Method1(bool, makeSpace, IN, unsigned int &, size,
	          Properties::NON_VIRTUAL,
	          __bool__makeSpace__unsigned_int_R1,
	          "",
	          "");
	I_Method0(bool, checkConsistency,
	          Properties::NON_VIRTUAL,
	          __bool__checkConsistency,
	          "",
	          "");
	I_Method0(osg::GLBufferObjectManager *, getParent,
	          Properties::NON_VIRTUAL,
	          __GLBufferObjectManager_P1__getParent,
	          "",
	          "");
	I_SimpleProperty(osg::GLBufferObjectManager *, Parent, 
	                 __GLBufferObjectManager_P1__getParent, 
	                 0);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::PixelBufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::BufferObject);
	I_ConstructorWithDefaults1(IN, osg::Image *, image, 0,
	                           Properties::NON_EXPLICIT,
	                           ____PixelBufferObject__osg_Image_P1,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::PixelBufferObject &, pbo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____PixelBufferObject__C5_PixelBufferObject_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, setImage, IN, osg::Image *, image,
	          Properties::NON_VIRTUAL,
	          __void__setImage__osg_Image_P1,
	          "",
	          "");
	I_Method0(osg::Image *, getImage,
	          Properties::NON_VIRTUAL,
	          __Image_P1__getImage,
	          "",
	          "");
	I_Method0(const osg::Image *, getImage,
	          Properties::NON_VIRTUAL,
	          __C5_Image_P1__getImage,
	          "",
	          "");
	I_Method1(bool, isPBOSupported, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __bool__isPBOSupported__unsigned_int,
	          "",
	          "");
	I_SimpleProperty(osg::Image *, Image, 
	                 __Image_P1__getImage, 
	                 __void__setImage__osg_Image_P1);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osg::PixelDataBufferObject::Mode)
	I_DeclaringFile("osg/BufferObject");
	I_EnumLabel(osg::PixelDataBufferObject::NONE);
	I_EnumLabel(osg::PixelDataBufferObject::READ);
	I_EnumLabel(osg::PixelDataBufferObject::WRITE);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::PixelDataBufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::BufferObject);
	I_Constructor0(____PixelDataBufferObject,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::PixelDataBufferObject &, pbo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____PixelDataBufferObject__C5_PixelDataBufferObject_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, setDataSize, IN, unsigned int, size,
	          Properties::NON_VIRTUAL,
	          __void__setDataSize__unsigned_int,
	          "Set new size of the buffer object. This will reallocate the memory on the next compile. ",
	          "");
	I_Method0(unsigned int, getDataSize,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getDataSize,
	          "Get data size of the used buffer. ",
	          "");
	I_Method1(void, compileBuffer, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__compileBuffer__State_R1,
	          "Compile the buffer (reallocate the memory if buffer is dirty). ",
	          "");
	I_Method1(void, bindBufferInReadMode, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__bindBufferInReadMode__State_R1,
	          "Bind the buffer in read mode, which means that data can be downloaded from the buffer (note: GL_PIXEL_UNPACK_BUFFER_ARB). ",
	          "");
	I_Method1(void, bindBufferInWriteMode, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__bindBufferInWriteMode__State_R1,
	          "Bind the buffer in write mode, which means following OpenGL instructions will write data into the buffer (note: GL_PIXEL_PACK_BUFFER_ARB). ",
	          "");
	I_Method1(void, unbindBuffer, IN, unsigned int, contextID,
	          Properties::VIRTUAL,
	          __void__unbindBuffer__unsigned_int,
	          "Unbind the buffer. ",
	          "");
	I_Method1(void, resizeGLObjectBuffers, IN, unsigned int, maxSize,
	          Properties::VIRTUAL,
	          __void__resizeGLObjectBuffers__unsigned_int,
	          "Resize any per context GLObject buffers to specified size. ",
	          "");
	I_Method1(osg::PixelDataBufferObject::Mode, getMode, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __Mode__getMode__unsigned_int,
	          "",
	          "");
	I_SimpleProperty(unsigned int, DataSize, 
	                 __unsigned_int__getDataSize, 
	                 __void__setDataSize__unsigned_int);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::VertexBufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::BufferObject);
	I_Constructor0(____VertexBufferObject,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::VertexBufferObject &, vbo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____VertexBufferObject__C5_VertexBufferObject_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(unsigned int, addArray, IN, osg::Array *, array,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__addArray__osg_Array_P1,
	          "",
	          "");
	I_Method1(void, removeArray, IN, osg::Array *, array,
	          Properties::NON_VIRTUAL,
	          __void__removeArray__osg_Array_P1,
	          "",
	          "");
	I_Method2(void, setArray, IN, unsigned int, i, IN, osg::Array *, array,
	          Properties::NON_VIRTUAL,
	          __void__setArray__unsigned_int__Array_P1,
	          "",
	          "");
	I_Method1(osg::Array *, getArray, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __Array_P1__getArray__unsigned_int,
	          "",
	          "");
	I_Method1(const osg::Array *, getArray, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __C5_Array_P1__getArray__unsigned_int,
	          "",
	          "");
	I_IndexedProperty(osg::Array *, Array, 
	                  __Array_P1__getArray__unsigned_int, 
	                  __void__setArray__unsigned_int__Array_P1, 
	                  0);
END_REFLECTOR

TYPE_NAME_ALIAS(std::list< osg::ref_ptr< osg::GLBufferObject > >, osg::GLBufferObjectList)

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::GLBufferObject >)
	I_DeclaringFile("osg/ref_ptr");
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osg::GLBufferObject *, ptr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osg::GLBufferObject > &, rp,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Method0(osg::GLBufferObject *, get,
	          Properties::NON_VIRTUAL,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          Properties::NON_VIRTUAL,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osg::GLBufferObject *, release,
	          Properties::NON_VIRTUAL,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osg::GLBufferObject > &, rp,
	          Properties::NON_VIRTUAL,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osg::GLBufferObject *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::GLBufferObjectManager >)
	I_DeclaringFile("osg/ref_ptr");
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osg::GLBufferObjectManager *, ptr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osg::GLBufferObjectManager > &, rp,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Method0(osg::GLBufferObjectManager *, get,
	          Properties::NON_VIRTUAL,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          Properties::NON_VIRTUAL,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osg::GLBufferObjectManager *, release,
	          Properties::NON_VIRTUAL,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osg::GLBufferObjectManager > &, rp,
	          Properties::NON_VIRTUAL,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osg::GLBufferObjectManager *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

STD_LIST_REFLECTOR(std::list< osg::ref_ptr< osg::GLBufferObject > >)

