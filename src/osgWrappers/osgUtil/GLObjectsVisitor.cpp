// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <OpenThreads/Mutex>
#include <osg/Drawable>
#include <osg/Geode>
#include <osg/GraphicsContext>
#include <osg/Group>
#include <osg/Node>
#include <osg/Program>
#include <osg/RenderInfo>
#include <osg/State>
#include <osg/StateSet>
#include <osg/Texture>
#include <osgUtil/GLObjectsVisitor>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgUtil::GLObjectsOperation)
	I_DeclaringFile("osgUtil/GLObjectsVisitor");
	I_BaseType(osg::GraphicsOperation);
	I_ConstructorWithDefaults1(IN, osgUtil::GLObjectsVisitor::Mode, mode, osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES|osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES,
	                           Properties::NON_EXPLICIT,
	                           ____GLObjectsOperation__GLObjectsVisitor_Mode,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, osg::Node *, subgraph, , IN, osgUtil::GLObjectsVisitor::Mode, mode, osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES|osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES,
	                           ____GLObjectsOperation__osg_Node_P1__GLObjectsVisitor_Mode,
	                           "",
	                           "");
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgUtil::GLObjectsVisitor::ModeValues)
	I_DeclaringFile("osgUtil/GLObjectsVisitor");
	I_EnumLabel(osgUtil::GLObjectsVisitor::SWITCH_ON_DISPLAY_LISTS);
	I_EnumLabel(osgUtil::GLObjectsVisitor::SWITCH_OFF_DISPLAY_LISTS);
	I_EnumLabel(osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS);
	I_EnumLabel(osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES);
	I_EnumLabel(osgUtil::GLObjectsVisitor::RELEASE_DISPLAY_LISTS);
	I_EnumLabel(osgUtil::GLObjectsVisitor::RELEASE_STATE_ATTRIBUTES);
	I_EnumLabel(osgUtil::GLObjectsVisitor::SWITCH_ON_VERTEX_BUFFER_OBJECTS);
	I_EnumLabel(osgUtil::GLObjectsVisitor::SWITCH_OFF_VERTEX_BUFFER_OBJECTS);
	I_EnumLabel(osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES);
END_REFLECTOR

TYPE_NAME_ALIAS(unsigned int, osgUtil::GLObjectsVisitor::Mode)

BEGIN_OBJECT_REFLECTOR(osgUtil::GLObjectsVisitor)
	I_DeclaringFile("osgUtil/GLObjectsVisitor");
	I_BaseType(osg::NodeVisitor);
	I_ConstructorWithDefaults1(IN, osgUtil::GLObjectsVisitor::Mode, mode, osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES|osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES,
	                           Properties::NON_EXPLICIT,
	                           ____GLObjectsVisitor__Mode,
	                           "Construct a GLObjectsVisitor to traverse all children, operating on node according to specified mode, such as to compile or release display list/texture objects etc. ",
	                           "Default mode is to compile GL objects. ");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the library name/namespapce of the visitor's. ",
	          "Should be defined by derived classes. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the visitor's class type. ",
	          "Should be defined by derived classes. ");
	I_Method0(void, reset,
	          Properties::VIRTUAL,
	          __void__reset,
	          "Method to call to reset visitor. ",
	          "Useful if your visitor accumulates state during a traversal, and you plan to reuse the visitor. To flush that state for the next traversal: call reset() prior to each traversal. ");
	I_Method1(void, setMode, IN, osgUtil::GLObjectsVisitor::Mode, mode,
	          Properties::NON_VIRTUAL,
	          __void__setMode__Mode,
	          "Set the operational mode of what operations to do on the scene graph. ",
	          "");
	I_Method0(osgUtil::GLObjectsVisitor::Mode, getMode,
	          Properties::NON_VIRTUAL,
	          __Mode__getMode,
	          "Get the operational mode. ",
	          "");
	I_Method1(void, setState, IN, osg::State *, state,
	          Properties::NON_VIRTUAL,
	          __void__setState__osg_State_P1,
	          "Set the State to use during traversal. ",
	          "");
	I_Method0(osg::State *, getState,
	          Properties::NON_VIRTUAL,
	          __osg_State_P1__getState,
	          "",
	          "");
	I_Method1(void, setRenderInfo, IN, osg::RenderInfo &, renderInfo,
	          Properties::NON_VIRTUAL,
	          __void__setRenderInfo__osg_RenderInfo_R1,
	          "",
	          "");
	I_Method0(osg::RenderInfo &, getRenderInfo,
	          Properties::NON_VIRTUAL,
	          __osg_RenderInfo_R1__getRenderInfo,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Node &, node,
	          Properties::VIRTUAL,
	          __void__apply__osg_Node_R1,
	          "Simply traverse using standard NodeVisitor traverse method. ",
	          "");
	I_Method1(void, apply, IN, osg::Geode &, node,
	          Properties::VIRTUAL,
	          __void__apply__osg_Geode_R1,
	          "For each Geode visited set the display list usage according to the _displayListMode. ",
	          "");
	I_Method1(void, apply, IN, osg::Drawable &, drawable,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_Drawable_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::StateSet &, stateset,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_StateSet_R1,
	          "",
	          "");
	I_SimpleProperty(osgUtil::GLObjectsVisitor::Mode, Mode, 
	                 __Mode__getMode, 
	                 __void__setMode__Mode);
	I_SimpleProperty(osg::RenderInfo &, RenderInfo, 
	                 __osg_RenderInfo_R1__getRenderInfo, 
	                 __void__setRenderInfo__osg_RenderInfo_R1);
	I_SimpleProperty(osg::State *, State, 
	                 __osg_State_P1__getState, 
	                 __void__setState__osg_State_P1);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< osg::GraphicsContext * >, osgUtil::IncrementalCompileOperation::Contexts)

TYPE_NAME_ALIAS(std::set< osg::GraphicsContext * >, osgUtil::IncrementalCompileOperation::ContextSet)

TYPE_NAME_ALIAS(std::map< osg::GraphicsContext * COMMA  osgUtil::IncrementalCompileOperation::CompileData >, osgUtil::IncrementalCompileOperation::CompileMap)

TYPE_NAME_ALIAS(std::list< osg::ref_ptr< osgUtil::IncrementalCompileOperation::CompileSet > >, osgUtil::IncrementalCompileOperation::CompileSets)

BEGIN_OBJECT_REFLECTOR(osgUtil::IncrementalCompileOperation)
	I_DeclaringFile("osgUtil/GLObjectsVisitor");
	I_BaseType(osg::GraphicsOperation);
	I_Constructor0(____IncrementalCompileOperation,
	               "",
	               "");
	I_Method1(void, assignContexts, IN, osgUtil::IncrementalCompileOperation::Contexts &, contexts,
	          Properties::NON_VIRTUAL,
	          __void__assignContexts__Contexts_R1,
	          "",
	          "");
	I_Method1(void, removeContexts, IN, osgUtil::IncrementalCompileOperation::Contexts &, contexts,
	          Properties::NON_VIRTUAL,
	          __void__removeContexts__Contexts_R1,
	          "",
	          "");
	I_Method1(void, addGraphicsContext, IN, osg::GraphicsContext *, gc,
	          Properties::NON_VIRTUAL,
	          __void__addGraphicsContext__osg_GraphicsContext_P1,
	          "",
	          "");
	I_Method1(void, removeGraphicsContext, IN, osg::GraphicsContext *, gc,
	          Properties::NON_VIRTUAL,
	          __void__removeGraphicsContext__osg_GraphicsContext_P1,
	          "",
	          "");
	I_Method0(void, mergeCompiledSubgraphs,
	          Properties::NON_VIRTUAL,
	          __void__mergeCompiledSubgraphs,
	          "Merge subgraphs that have been compiled. ",
	          "");
	I_Method1(void, add, IN, osg::Node *, subgraphToCompile,
	          Properties::NON_VIRTUAL,
	          __void__add__osg_Node_P1,
	          "Add a subgraph to be compiled. ",
	          "");
	I_Method2(void, add, IN, osg::Group *, attachmentPoint, IN, osg::Node *, subgraphToCompile,
	          Properties::NON_VIRTUAL,
	          __void__add__osg_Group_P1__osg_Node_P1,
	          "Add a subgraph to be compiled and add automatically to attachPoint on call to mergeCompiledSubgraphs. ",
	          "");
	I_MethodWithDefaults2(void, add, IN, osgUtil::IncrementalCompileOperation::CompileSet *, compileSet, , IN, bool, callBuildCompileMap, true,
	                      Properties::NON_VIRTUAL,
	                      __void__add__CompileSet_P1__bool,
	                      "Add a CompileSet to be compiled. ",
	                      "");
	I_Method0(OpenThreads::Mutex &, getToCompiledMutex,
	          Properties::NON_VIRTUAL,
	          __OpenThreads_Mutex_R1__getToCompiledMutex,
	          "",
	          "");
	I_Method0(osgUtil::IncrementalCompileOperation::CompileSets &, getToCompile,
	          Properties::NON_VIRTUAL,
	          __CompileSets_R1__getToCompile,
	          "",
	          "");
	I_Method0(OpenThreads::Mutex &, getCompiledMutex,
	          Properties::NON_VIRTUAL,
	          __OpenThreads_Mutex_R1__getCompiledMutex,
	          "",
	          "");
	I_Method0(osgUtil::IncrementalCompileOperation::CompileSets &, getCompiled,
	          Properties::NON_VIRTUAL,
	          __CompileSets_R1__getCompiled,
	          "",
	          "");
	I_SimpleProperty(osgUtil::IncrementalCompileOperation::CompileSets &, Compiled, 
	                 __CompileSets_R1__getCompiled, 
	                 0);
	I_SimpleProperty(OpenThreads::Mutex &, CompiledMutex, 
	                 __OpenThreads_Mutex_R1__getCompiledMutex, 
	                 0);
	I_SimpleProperty(osgUtil::IncrementalCompileOperation::CompileSets &, ToCompile, 
	                 __CompileSets_R1__getToCompile, 
	                 0);
	I_SimpleProperty(OpenThreads::Mutex &, ToCompiledMutex, 
	                 __OpenThreads_Mutex_R1__getToCompiledMutex, 
	                 0);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgUtil::IncrementalCompileOperation::CompileCompletedCallback)
	I_DeclaringFile("osgUtil/GLObjectsVisitor");
	I_BaseType(osg::Referenced);
	I_Constructor0(____CompileCompletedCallback,
	               "",
	               "");
	I_Method1(bool, compileCompleted, IN, osgUtil::IncrementalCompileOperation::CompileSet *, compileSet,
	          Properties::PURE_VIRTUAL,
	          __bool__compileCompleted__CompileSet_P1,
	          "",
	          "");
END_REFLECTOR

TYPE_NAME_ALIAS(std::list< osg::ref_ptr< osg::Drawable > >, osgUtil::IncrementalCompileOperation::CompileData::Drawables)

TYPE_NAME_ALIAS(std::list< osg::ref_ptr< osg::Texture > >, osgUtil::IncrementalCompileOperation::CompileData::Textures)

TYPE_NAME_ALIAS(std::list< osg::ref_ptr< osg::Program > >, osgUtil::IncrementalCompileOperation::CompileData::Programs)

BEGIN_OBJECT_REFLECTOR(osgUtil::IncrementalCompileOperation::CompileData)
	I_DeclaringFile("osgUtil/GLObjectsVisitor");
	I_BaseType(osg::Referenced);
	I_Constructor0(____CompileData,
	               "",
	               "");
	I_Method0(bool, empty,
	          Properties::NON_VIRTUAL,
	          __bool__empty,
	          "",
	          "");
	I_PublicMemberProperty(osgUtil::IncrementalCompileOperation::CompileData::Drawables, _drawables);
	I_PublicMemberProperty(osgUtil::IncrementalCompileOperation::CompileData::Textures, _textures);
	I_PublicMemberProperty(osgUtil::IncrementalCompileOperation::CompileData::Programs, _programs);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgUtil::IncrementalCompileOperation::CompileSet)
	I_DeclaringFile("osgUtil/GLObjectsVisitor");
	I_BaseType(osg::Referenced);
	I_Constructor0(____CompileSet,
	               "",
	               "");
	I_Constructor1(IN, osg::Node *, subgraphToCompile,
	               Properties::NON_EXPLICIT,
	               ____CompileSet__osg_Node_P1,
	               "",
	               "");
	I_Constructor2(IN, osg::Group *, attachmentPoint, IN, osg::Node *, subgraphToCompile,
	               ____CompileSet__osg_Group_P1__osg_Node_P1,
	               "",
	               "");
	I_MethodWithDefaults2(void, buildCompileMap, IN, osgUtil::IncrementalCompileOperation::ContextSet &, context, , IN, osgUtil::GLObjectsVisitor::Mode, mode, osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES,
	                      Properties::NON_VIRTUAL,
	                      __void__buildCompileMap__ContextSet_R1__GLObjectsVisitor_Mode,
	                      "",
	                      "");
	I_Method0(bool, compileCompleted,
	          Properties::NON_VIRTUAL,
	          __bool__compileCompleted,
	          "",
	          "");
	I_PublicMemberProperty(osg::ref_ptr< osg::Group >, _attachmentPoint);
	I_PublicMemberProperty(osg::ref_ptr< osg::Node >, _subgraphToCompile);
	I_PublicMemberProperty(osg::ref_ptr< osgUtil::IncrementalCompileOperation::CompileCompletedCallback >, _compileCompletedCallback);
	I_PublicMemberProperty(osgUtil::IncrementalCompileOperation::CompileMap, _compileMap);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::Program >)
	I_DeclaringFile("osg/ref_ptr");
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osg::Program *, ptr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osg::Program > &, rp,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Method0(osg::Program *, get,
	          Properties::NON_VIRTUAL,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          Properties::NON_VIRTUAL,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osg::Program *, release,
	          Properties::NON_VIRTUAL,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osg::Program > &, rp,
	          Properties::NON_VIRTUAL,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osg::Program *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::Texture >)
	I_DeclaringFile("osg/ref_ptr");
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osg::Texture *, ptr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osg::Texture > &, rp,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Method0(osg::Texture *, get,
	          Properties::NON_VIRTUAL,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          Properties::NON_VIRTUAL,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osg::Texture *, release,
	          Properties::NON_VIRTUAL,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osg::Texture > &, rp,
	          Properties::NON_VIRTUAL,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osg::Texture *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osgUtil::IncrementalCompileOperation::CompileSet >)
	I_DeclaringFile("osg/ref_ptr");
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osgUtil::IncrementalCompileOperation::CompileSet *, ptr,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osgUtil::IncrementalCompileOperation::CompileSet > &, rp,
	               Properties::NON_EXPLICIT,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Method0(osgUtil::IncrementalCompileOperation::CompileSet *, get,
	          Properties::NON_VIRTUAL,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          Properties::NON_VIRTUAL,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osgUtil::IncrementalCompileOperation::CompileSet *, release,
	          Properties::NON_VIRTUAL,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osgUtil::IncrementalCompileOperation::CompileSet > &, rp,
	          Properties::NON_VIRTUAL,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osgUtil::IncrementalCompileOperation::CompileSet *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

STD_LIST_REFLECTOR(std::list< osg::ref_ptr< osg::Drawable > >)

STD_LIST_REFLECTOR(std::list< osg::ref_ptr< osg::Program > >)

STD_LIST_REFLECTOR(std::list< osg::ref_ptr< osg::Texture > >)

STD_LIST_REFLECTOR(std::list< osg::ref_ptr< osgUtil::IncrementalCompileOperation::CompileSet > >)

STD_MAP_REFLECTOR(std::map< osg::GraphicsContext * COMMA  osgUtil::IncrementalCompileOperation::CompileData >)

STD_SET_REFLECTOR(std::set< osg::GraphicsContext * >)

